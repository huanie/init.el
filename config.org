# -*- eval: (huan-config-mode) -*-
#+TITLE: lol
#+PROPERTY: header-args:emacs-lisp :tangle ./init-tangled.el

* Custom functions
#+begin_src emacs-lisp
  (add-to-list 'load-path (concat user-emacs-directory "lisp"))
  (require 'huan-doxygen)
  (require 'huan-xdg-open)
  (defun visit-config ()
    "Visit this file."
    (interactive)
    (find-file (concat user-emacs-directory "config.org")))
#+end_src
* Editing
#+begin_src emacs-lisp
  (set-language-environment "UTF-8")
  (electric-pair-mode 1)
  (global-visual-line-mode 1)
  (global-subword-mode 1)
  (delete-selection-mode 1)
  (column-number-mode 1)
  (setq tab-always-indent 'complete)

  (use-package yasnippet
    :config
    (yas-global-mode 1))
  (use-package yasnippet-snippets)
#+end_src
** Meow
#+begin_src emacs-lisp
  (defun meow-setup ()
    "Meow setup."
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (setq meow-visit-sanitize-completion nil)
    (setq meow-use-system-clipboard t)
    (meow-motion-overwrite-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore))
    (meow-leader-define-key
     ;; SPC j/k will run the original command in MOTION state.
     '("j" . "H-j")
     '("k" . "H-k")
     ;; Use SPC (0-9) for digit arguments.
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("<escape>" . ignore)))

  (use-package meow
    :config
    (meow-setup)
    (meow-global-mode 1))
#+end_src
* User Interface
** Unclutter
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (setq inhibit-startup-screen t)
#+end_src
** Visual Indicators
#+begin_src emacs-lisp
  (setq visible-bell t)
  (fido-vertical-mode 1)
  (setq completions-detailed t)

  ;; show number of occurences
  (setq isearch-lazy-count t)
  (setq show-paren-style 'expression)
  (add-hook 'text-mode-hook #'flyspell-mode)

  ;; the best editor theme
  (load-theme 'modus-operandi)

  (use-package which-key
    :config
    (which-key-mode 1))

  (use-package doom-modeline
    :config
    (setq doom-modeline-hud t
          doom-modeline-icon nil)
    (doom-modeline-mode 1))
#+end_src
** Buffers and Windows
#+begin_src emacs-lisp
  (tab-bar-mode 1)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (winner-mode 1)
#+end_src
* Writing documents
** Org
#+begin_src emacs-lisp
  (require 'org)

  (add-hook 'org-mode-hook #'org-indent-mode)
  (add-hook 'org-mode-hook #'org-num-mode)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (use-package htmlize)
#+end_src
** Latex
#+begin_src emacs-lisp
  (use-package tex
    :ensure auctex)
#+end_src
** Markdown
#+begin_src emacs-lisp
  (use-package markdown-mode)
#+end_src
* Files
#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . ,(concat user-emacs-directory "backups")))
        delete-old-versions t
        version-control t)
  (setq create-lockfiles nil)
  (setq create-lock-files nil)
  (setq make-backup-files nil)
  (setq auto-save-default nil)

  (setq dired-listing-switches "-aBhl --group-directories-first")
  (global-auto-revert-mode 1)
#+end_src
** Open Files/Directories in external programs
#+begin_src emacs-lisp
  (defun huan-open (file-or-dir)
    "Open current FILE-OR-DIR in external app."
    (let ((path file-or-dir))
      (start-process "" nil
                     "/usr/bin/xdg-open"
                     (if path path (expand-file-name default-directory)))))

  (defun huan-open-directory ()
    "Open directory in external app."
    (interactive)
    (huan-open default-directory))

  (defun huan-open-dwim ()
    "Open current file or directory in external app."
    (interactive)
    (huan-open (buffer-file-name)))
#+end_src
* Programming
#+begin_src emacs-lisp
  ;; line number fringe will not change column size
  (setq display-line-numbers-width-start t)

  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (add-hook 'prog-mode-hook #'flyspell-prog-mode)
  (add-hook 'prog-mode-hook #'flymake-mode)

  (add-hook 'eglot-managed-mode-hook
            (lambda ()
              (if (eglot-managed-p)
                  (add-hook 'before-save-hook #'eglot-format-buffer nil t)
                (remove-hook 'before-save-hook #'eglot-format-buffer))))

  ;; nice git UI
  (use-package magit)

  ;; shiny completion box
  (use-package company
    :functions global-company-mode
    :config
    (global-company-mode)
    :custom
    (company-minimum-prefix-length 2)
    (company-idle-delay 0.1))
#+end_src
** Terminals
#+begin_src emacs-lisp
  (use-package eat
    :hook
    (eshell-load . eat-eshell-mode)
    (load-hook . eat-eshell-visual-command-mode)
    :custom
    (eat-kill-buffer-on-exit t))

  (defun huan-new-eat (term-buffer-name &optional arg)
    "Create a new eat terminal with TERM-BUFFER-NAME as buffer name.
  When called with numeric prefix argument ARG the number will be added
  to the name.

  If an eat terminal with that `buffer-name' already exists switch to it."
    (interactive "sEnter buffer name: ")
    (let ((eat-buffer-name
           (if current-prefix-arg
               (concat term-buffer-name
                       "<" (number-to-string current-prefix-arg) ">")
             term-buffer-name)))
      (eat)))

  (defun huan-project-eat (&optional arg)
    "Create an eat terminal with the project base folder as buffer name.
  If the terminal already exists switch to it.  Calling with numeric
  prefix argument ARG will append the number to the buffer name or visit
  the corresponding buffer.

  The function will do nothing if you are not in a project directory."
    (interactive "P")
    (when (project-current)
      (let* ((project-root-name  (project-root (project-current)))
             (root-name-length (length project-root-name))
             (project-name
              (file-name-nondirectory
               (substring project-root-name
                          0 (- root-name-length 1))))
             (eat-buffer-name
              (if arg
                  (concat project-name "<" (number-to-string arg) ">")
                project-name)))
        (eat))))

  (global-set-key (kbd "C-x p s") #'huan-project-eat)
#+end_src
** Tree-Sitter
#+begin_src emacs-lisp
  (setq treesit-language-source-alist
        '((bash . ("https://github.com/tree-sitter/tree-sitter-bash"))
          (c . ("https://github.com/tree-sitter/tree-sitter-c"))
          (cpp . ("https://github.com/tree-sitter/tree-sitter-cpp"))
          (css . ("https://github.com/tree-sitter/tree-sitter-css"))
          (go . ("https://github.com/tree-sitter/tree-sitter-go"))
          (html . ("https://github.com/tree-sitter/tree-sitter-html"))
          (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript"))
          (json . ("https://github.com/tree-sitter/tree-sitter-json"))
          (lua . ("https://github.com/Azganoth/tree-sitter-lua"))
          (make . ("https://github.com/alemuller/tree-sitter-make"))
          (ocaml . ("https://github.com/tree-sitter/tree-sitter-ocaml" "ocaml/src" "ocaml"))
          (python . ("https://github.com/tree-sitter/tree-sitter-python"))
          (php . ("https://github.com/tree-sitter/tree-sitter-php"))
          (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src"))
          (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src"))
          (ruby . ("https://github.com/tree-sitter/tree-sitter-ruby"))
          (rust . ("https://github.com/tree-sitter/tree-sitter-rust"))
          (sql . ("https://github.com/m-novikov/tree-sitter-sql"))
          (toml . ("https://github.com/tree-sitter/tree-sitter-toml"))
          (zig . ("https://github.com/GrayJack/tree-sitter-zig"))))
#+end_src
** Rust
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-ts-mode))
  (require 'eglot)
  (add-to-list 'eglot-server-programs
               '(rust-ts-mode
                 .
                 ("rust-analyzer" :initializationOptions
                  ( :files (:excludeDirs [".flatpak-builder" "build"])
                    :check (:command "clippy")))))
  (add-hook 'rust-ts-mode-hook #'eglot-ensure)
#+end_src
** Javascript
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.ts\\'" . tsx-ts-mode))
#+end_src
** Racket
#+begin_src emacs-lisp
  (use-package racket-mode
    :custom
    (racket-program (expand-file-name "~/racket/bin/racket"))
    :hook
    (racket-mode . racket-xp-mode))
#+end_src
** Sepples
#+begin_src emacs-lisp
    (add-to-list 'eglot-server-programs
                 '(c++-mode . ("clangd" "--clang-tidy")))
#+end_src
