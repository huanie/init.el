# -*- eval: (huan-config-mode) -*-
#+TITLE: lol
#+PROPERTY: header-args:emacs-lisp :tangle ./init-tangled.el :lexical t
* Custom functions
#+begin_src emacs-lisp :comments no
  ;; -*- lexical-binding: t -*-
  (setq load-prefer-newer t)

  (add-to-list 'load-path (locate-user-emacs-file "lisp"))
  (defun visit-config ()
    "Visit this file."
    (interactive)
    (find-file (locate-user-emacs-file "config.org")))

  (defun my/eval-buffer ()
    "Execute the current buffer as Lisp code.
  Need this because defcustom, defvar etc
  will not be evaluated with default `eval-buffer'."
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (while (not (eobp))
	(forward-sexp)
	(eval-last-sexp nil))))
#+end_src
* Editing
#+begin_src emacs-lisp
  (save-place-mode 1)
  (electric-pair-mode 1)
  (global-visual-line-mode 1)
  (global-subword-mode 1)
  (delete-selection-mode 1)
  (column-number-mode 1)
  (setq tab-always-indent 'complete)
  (require 'huan-case-converter)

  (use-package surround
    :bind-keymap
    ("C-'" . surround-keymap))
  (use-package vundo)
  (use-package expreg
    :bind
    (("C-=" . expreg-expand)
     ("C-+" . expreg-contract)))
  (use-package editorconfig
    :config
    (editorconfig-mode 1))

  (setq-default indent-tabs-mode nil)
#+end_src
* User Interface
** Smooth scroll
#+begin_src emacs-lisp
  (use-package emacs
    :ensure nil
    :bind
    ([remap scroll-up-command]   . pixel-scroll-interpolate-down)
    ([remap scroll-down-command] . pixel-scroll-interpolate-up)
    :custom
    (pixel-scroll-precision-interpolate-page t)
    :init
    ;; scrolling with an ordinary mouse to be almost as smooth as scrolling with a touchpad, on systems other than X:
    ;; (setq pixel-scroll-precision-large-scroll-height 40.0)
    (pixel-scroll-precision-mode 1))
#+end_src
** Unclutter
#+begin_src emacs-lisp
  (setq native-comp-async-report-warnings-errors 'silent) ; Emacs 28 with native compilation
  (setq native-compile-prune-cache t) ; Emacs 29
  (when (eq system-type 'darwin)
	(setq frame-resize-pixelwise t))
  (tool-bar-mode -1)
  (setq-default tab-width 4)
#+end_src
** Visual Indicators
#+begin_src emacs-lisp
  (setq visible-bell t)
  (add-to-list 'initial-frame-alist '(fullscreen . maximized))

  ;; show number of occurences
  (setq isearch-lazy-count t)
  (setq show-paren-style 'parenthesis)

  ;; the best editor theme
  (load-theme 'modus-operandi)

  (use-package which-key
    :config
    (which-key-mode 1))

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom
    (doom-modeline-icon nil))

  (use-package jinx
    :config
    (global-jinx-mode))

  (use-package pdf-tools)
#+end_src
** Buffers and Windows
#+begin_src emacs-lisp
  (tab-bar-mode 1)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (winner-mode 1)

  ;; Reuse the frame when window already exists
  (setopt
   display-buffer-alist
   '((".*"
      nil
      (reusable-frames . visible))))

  (keymap-global-unset "C-<wheel-up>" t)
  (keymap-global-unset "C-<wheel-down>" t)
#+end_src
** Minibuffer completion
#+begin_src emacs-lisp
  (setq completion-styles '(basic substring initials flex))
  (setq read-file-name-completion-ignore-case t
        read-buffer-completion-ignore-case t
        completion-ignore-case t)
  (setq completions-detailed t)
  (setq completion-category-overrides
        '((file (styles . (basic partial-completion)))
            (bookmark (styles . (basic substring)))
            (library (styles . (basic substring)))
            (imenu (styles . (basic substring)))
            (kill-ring (styles . (emacs22)))
            (eglot (styles . (emacs22 substring)))))

  (use-package marginalia
    :init
    (marginalia-mode))

  (use-package vertico
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))

  ;; Configure directory extension.
  (use-package vertico-directory
    :ensure nil
    :after vertico
    :ensure nil
    ;; More convenient directory navigation commands
    :bind (:map vertico-map
                ("RET" . vertico-directory-enter)
                ("DEL" . vertico-directory-delete-char)
                ("M-DEL" . vertico-directory-delete-word))
    ;; Tidy shadowed file names
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))

  (use-package vertico-mouse
    :ensure nil
    :ensure nil
    :after vertico
    :init
    (vertico-mouse-mode))

  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
#+end_src
*** Save minibuffer history
#+begin_src emacs-lisp
  (setq savehist-file (locate-user-emacs-file "savehist"))
  (setq history-length 500)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history t)
  (savehist-mode 1)
#+end_src
*** Consult
#+begin_src emacs-lisp
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s D" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 3. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    ;;;; 4. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 5. No project support
    ;; (setq consult-project-function nil)
  )

  (use-package embark
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc. You may adjust the
    ;; Eldoc strategy, if you want to see the documentation from
    ;; multiple providers. Beware that using this can be a little
    ;; jarring since the message shown in the minibuffer can be more
    ;; than one line, causing the modeline to move up and down:

    ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :after embark
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
* Writing documents
** Org
#+begin_src emacs-lisp
  (require 'org)

  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (use-package htmlize)
#+end_src
** Typst
#+begin_src emacs-lisp
  (add-to-list 'load-path (locate-user-emacs-file "lisp/typst-ts-mode"))
  (require 'typst-ts-mode)
  (setq typst-ts-watch-options "--open")
#+end_src
* Files
#+begin_src emacs-lisp
  (recentf-mode 1)

  (use-package zoxide)

  (setq backup-directory-alist `(("." . ,(locate-user-emacs-file "backups")))
	delete-old-versions t
	version-control t)
  (setq create-lockfiles nil)
  (setq auto-save-default nil)

  (setq dired-listing-switches "-aBhl --group-directories-first")
  (setq dired-kill-when-opening-new-dired-buffer t)
  (setq dired-dwim-target t)
  (global-auto-revert-mode 1)

  ;; trust dir-locals.el
  (advice-add 'risky-local-variable-p :override #'ignore)
#+end_src
* LSP
#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (yas-global-mode 1))
  (use-package yasnippet-snippets)
  (use-package markdown-mode)

  (use-package eglot
    :ensure nil
    :hook
    (eglot-managed-mode . eglot-inlay-hints-mode)
    :config
    (add-to-list 'eglot-server-programs
                 '((rust-ts-mode rust-mode)
                   .
                   ("rust-analyzer" :initializationOptions
                    ( :files (:excludeDirs [".flatpak-builder" "build" "_build" "builddir" "flatpak_app" "flatpak-app" ".fenv"])
                      :check (:command "clippy")
                      :imports (:granularity (:group "module"))
                      :typing (:autoClosingAngleBrackets (:enable nil))))))
    (add-to-list 'eglot-server-programs
                 '(c++-mode "/opt/homebrew/opt/llvm/bin/clangd" "--clang-tidy" "--compile-commands-dir=build"))
    ;; https://github.com/Ziqi-Yang/.emacs.d/blob/main/modules/languages/l-general.el
    (fset #'jsonrpc--log-event #'ignore) ;; remove laggy typing it probably reduces chatty json from lsp to eglot i guess
    (setq-default eglot-events-buffer-size 0) ;; disable log, improve performance
    ;; list of things that eglot won't change
    (customize-set-variable 'eglot-stay-out-of '(imenu))
    (customize-set-variable 'eglot-extend-to-xref t)
    (customize-set-variable 'eglot-autoshutdown t) ;; automatically shutdown
    (add-hook 'eglot-managed-mode-hook
              (lambda () (eglot-inlay-hints-mode -1)))
    (setq-default eglot-send-changes-idle-time 0.25))

  (when (eq system-type 'darwin)
    (setenv "DYLD_FALLBACK_LIBRARY_PATH" "/Library/Developer/CommandLineTools/usr/lib/"))

  (use-package eglot-booster
    :ensure (:host github :repo "jdtsmith/eglot-booster")
    :after eglot)

  (use-package lsp-mode
    :config
    (setq lsp-modeline-diagnostics-mode t)
    (setq lsp-apply-edits-after-file-operations nil)
    :hook
    (jtsx-tsx-mode . lsp-deferred)
    (typescript-ts-mode . lsp-deferred)
    :commands (lsp lsp-deferred))

  (use-package lsp-ui
    :commands lsp-ui-mode)

  (use-package lsp-tailwindcss
    :init
    (setq lsp-tailwindcss-add-on-mode t)
    :config
    (add-to-list 'lsp-tailwindcss-major-modes 'jtsx-tsx-mode))

  (use-package flycheck
    :hook
    (lsp-mode . flycheck-mode)
    :config
    (add-hook 'flycheck-mode-hook (lambda ()
                                    (flymake-mode -1))))
#+end_src
* Programming
#+begin_src emacs-lisp
  ;; line number fringe will not change column size
  (setq display-line-numbers-width-start t)
  (setq display-line-numbers-widen nil)

  ;; compilation buffer
  (setq compilation-scroll-output t)

  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (add-hook 'prog-mode-hook #'flymake-mode)

  (use-package transient)

  ;; nice git UI
  (use-package magit)

  ;; shiny completion box
  ;; (use-package corfu
  ;;   :custom
  ;;   (corfu-cycle t)
  ;;   (corfu-auto t)
  ;;   (corfu-preselect 'prompt)
  ;;   :bind
  ;;   (:map corfu-map
  ;; 	    ("TAB" . corfu-next)
  ;; 	    ([tab] . corfu-next)
  ;; 	    ("S-TAB" . corfu-previous)
  ;; 	    ([backtab] . corfu-previous))
  ;;   :init
  ;;   (global-corfu-mode))

  ;; (use-package cape
  ;;   :after corfu
  ;;   :init
  ;;   (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  ;;   (add-to-list 'completion-at-point-functions #'cape-file)
  ;;   (add-to-list 'completion-at-point-functions #'cape-elisp-block)
  ;;   (add-to-list 'completion-at-point-functions #'cape-elisp-symbol))

  ;; (use-package svg-lib)
  ;; (use-package kind-icon
  ;;   :after corfu
  ;;   :custom
  ;;   (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
  ;;   :config
  ;;   (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

  (use-package company
    :config
    (global-company-mode))

#+end_src
** Comments
#+begin_src emacs-lisp
  (use-package separedit
    :bind (:map prog-mode-map
		("C-c '" . separedit))
    :custom
    (separedit-default-mode 'markdown-mode))
#+end_src
** Tree Sitter
#+begin_src emacs-lisp
  (setq major-mode-remap-alist
	'((rust-mode  . rust-ts-mode)))
#+end_src
** Terminals
#+begin_src emacs-lisp
  (use-package eat
    :custom
    (eat-kill-buffer-on-exit t))

  (use-package tramp-term)
#+end_src
** Rust
#+begin_src emacs-lisp
  (use-package rust-mode)
  (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-ts-mode))
  (use-package slint-mode)
#+end_src
** Tree-Sitter
#+begin_src emacs-lisp
  (setq treesit-language-source-alist
        '((bash . ("https://github.com/tree-sitter/tree-sitter-bash"))
          (c . ("https://github.com/tree-sitter/tree-sitter-c"))
          (cpp . ("https://github.com/tree-sitter/tree-sitter-cpp"))
          (css . ("https://github.com/tree-sitter/tree-sitter-css"))
          (go . ("https://github.com/tree-sitter/tree-sitter-go"))
          (yaml . ("https://github.com/ikatyang/tree-sitter-yaml"))
          (html . ("https://github.com/tree-sitter/tree-sitter-html"))
          (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript"))
          (json . ("https://github.com/tree-sitter/tree-sitter-json"))
          (lua . ("https://github.com/tree-sitter-grammars/tree-sitter-lua"))
          (make . ("https://github.com/alemuller/tree-sitter-make"))
          (ocaml . ("https://github.com/tree-sitter/tree-sitter-ocaml" "ocaml/src" "ocaml"))
          (python . ("https://github.com/tree-sitter/tree-sitter-python"))
          (php . ("https://github.com/tree-sitter/tree-sitter-php"))
          (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src"))
          (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src"))
          (ruby . ("https://github.com/tree-sitter/tree-sitter-ruby"))
          (rust . ("https://github.com/tree-sitter/tree-sitter-rust"))
          (sql . ("https://github.com/m-novikov/tree-sitter-sql"))
          (toml . ("https://github.com/tree-sitter/tree-sitter-toml"))
          (zig . ("https://github.com/GrayJack/tree-sitter-zig"))
          (blueprint . ("https://github.com/huanie/tree-sitter-blueprint"))
          (scala . ("https://github.com/tree-sitter/tree-sitter-scala"))
          (typst . ("https://github.com/uben0/tree-sitter-typst"))
          (elixir . ("https://github.com/elixir-lang/tree-sitter-elixir"))
          (heex . ("https://github.com/phoenixframework/tree-sitter-heex"))
          (java . ("https://github.com/tree-sitter/tree-sitter-java"))
          (qmljs . ("https://github.com/yuja/tree-sitter-qmljs"))
          (swift . ("~/.config/emacs/tree-sitter/tree-sitter-swift"))))

  (setq treesit-font-lock-level 4)
#+end_src
** Racket
#+begin_src emacs-lisp
  (use-package racket-mode
    :custom
    (racket-program (expand-file-name "/opt/homebrew/bin/racket"))
    :hook
    (racket-mode . racket-xp-mode))
#+end_src
** Emacs Lisp
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :hook
    (emacs-lisp-mode . aggressive-indent-mode))

  (use-package erefactor)
#+end_src
** Gnome
#+begin_src emacs-lisp
  (add-to-list 'load-path (locate-user-emacs-file "lisp/blueprint-ts-mode"))
  (require 'blueprint-ts-mode)
  (use-package meson-mode)
#+end_src
** Web
#+begin_src emacs-lisp
  (use-package apheleia
    :hook
    (tsx-ts-mode . apheleia-mode)
    (css-ts-mode . apheleia-mode)
    (css-mode . apheleia-mode)
    (js-json-mode . apheleia-mode)
    (rust-ts-mode . apheleia-mode)
    (c++-ts-mode . apheleia-mode))

  (use-package jtsx
    :ensure t
    :mode (("\\.jsx?\\'" . jtsx-jsx-mode)
           ("\\.tsx\\'" . jtsx-tsx-mode)
           ("\\.ts\\'" . jtsx-typescript-mode))
    :commands jtsx-install-treesit-language
    :hook ((jtsx-tsx-mode . apheleia-mode)
           (jtsx-typescript-mode . apheleia-mode))
    :custom
    ;; Optional customizations
    ;; (js-indent-level 2)
    (typescript-ts-mode-indent-offset 4)
    ;; (jtsx-switch-indent-offset 0)
    ;; (jtsx-indent-statement-block-regarding-standalone-parent nil)
    ;; (jtsx-jsx-element-move-allow-step-out t)
    ;; (jtsx-enable-jsx-electric-closing-element t)
    ;; (jtsx-enable-electric-open-newline-between-jsx-element-tags t)
    ;; (jtsx-enable-jsx-element-tags-auto-sync nil)
    (jtsx-enable-all-syntax-highlighting-features t)
    :config
    (defun jtsx-bind-keys-to-mode-map (mode-map)
      "Bind keys to MODE-MAP."
      (define-key mode-map (kbd "C-c C-j") 'jtsx-jump-jsx-element-tag-dwim)
      (define-key mode-map (kbd "C-c j o") 'jtsx-jump-jsx-opening-tag)
      (define-key mode-map (kbd "C-c j c") 'jtsx-jump-jsx-closing-tag)
      (define-key mode-map (kbd "C-c j r") 'jtsx-rename-jsx-element)
      (define-key mode-map (kbd "C-c <down>") 'jtsx-move-jsx-element-tag-forward)
      (define-key mode-map (kbd "C-c <up>") 'jtsx-move-jsx-element-tag-backward)
      (define-key mode-map (kbd "C-c C-<down>") 'jtsx-move-jsx-element-forward)
      (define-key mode-map (kbd "C-c C-<up>") 'jtsx-move-jsx-element-backward)
      (define-key mode-map (kbd "C-c C-S-<down>") 'jtsx-move-jsx-element-step-in-forward)
      (define-key mode-map (kbd "C-c C-S-<up>") 'jtsx-move-jsx-element-step-in-backward)
      (define-key mode-map (kbd "C-c j w") 'jtsx-wrap-in-jsx-element)
      (define-key mode-map (kbd "C-c j u") 'jtsx-unwrap-jsx)
      (define-key mode-map (kbd "C-c j d") 'jtsx-delete-jsx-node))

    (defun jtsx-bind-keys-to-jtsx-jsx-mode-map ()
      (jtsx-bind-keys-to-mode-map jtsx-jsx-mode-map))

    (defun jtsx-bind-keys-to-jtsx-tsx-mode-map ()
      (jtsx-bind-keys-to-mode-map jtsx-tsx-mode-map))

    (add-hook 'jtsx-jsx-mode-hook 'jtsx-bind-keys-to-jtsx-jsx-mode-map)
    (add-hook 'jtsx-tsx-mode-hook 'jtsx-bind-keys-to-jtsx-tsx-mode-map))

  (use-package web-mode)
#+end_src
* Sepples
#+begin_src emacs-lisp
  ;; qt
  (use-package qml-ts-mode
    :ensure (:host github :repo "https://github.com/xhcoding/qml-ts-mode"))

  (add-to-list 'auto-mode-alist '("\\.cpp\\'" . c++-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.mpp\\'" . c++-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.hpp\\'" . c++-ts-mode))
#+end_src
* Swift
#+begin_src emacs-lisp
  (use-package swift-ts-mode)
#+end_src
